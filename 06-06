Class Notes 05/06

Demo Day Improvements/Ideas from Each Group

Ideas
-	Sprint Review on Friday (whenever we get the Story Points) 
-	Sprint Retrospective on Wednesday
-	DAILY SCRUMS (Hangouts) FUCKING MANDATORY
-	Toggl extension for Chrome

Improvements 

1.	SDLC Statistics need to be improved for next Demo
-	Code Statistics (Created, Deleted, and Modified)
-	SonarCloud
-	Travis-CI 
-	CodeCov
2.	Story Points need to be adjusted (.5)
3.	Estimating our Velocity as a group
4.	Estimated Story Points
5.	Actual Story Points
6.	Total Group Time / Indicate individual Toggl time
7.	What was still in the Product and Sprint Backlogs
8.	Time Estimation for each task
9.	Then the Actual Time it took to complete it

•	Scrum master goes last of the overview of the team for daily stand ups 


Continuation of Software Engineering Presentation

DIA
-	88 airport gates in 3 concourses, 17 mile of track and 5 mile of conveyor belts, etc.
-	The automated never worked: 16 months past its hard deadline, cost the city $560 million over budget, last airline costed them 1 million to keep it going
Chaos 1995
-	$250 billion each year on IT application development of approximately 175,000 Projects 
-	31.1% of projects would be cancelled before they got completed. 
-	Governments spent $81 billion for the cancelled projects
-	Only 16.2% for software projects that are completed on-time and on-budget
No Silver Bullet
-	“There is no single development, in either technology or management technique, which by itself promises even one order of magnitude improvement within a decade in productivity, in reality, in simplicity.” – Fred Brooks
-	Accidental complexity VS. essential complexity
-	There is a difference between an ordinary designer and a great one
Software Engineering 
-	The study and an application of engineering to the design, development, and maintenance of software. 
-	“Anything with REAL science in the name is a wannabe. Computer Science is not a science.”
Terminology 
-	Program Requirements:
♣	Statements that define and qualify what the program needs to do
♣	The work requirements aren’t used in the same way as elsewhere
♣	Software requirements tend to be negotiable.
-	Functional Requirements:
♣	What a program needs to do (Does it do this thing or not?)
♣	Yes/No
-	Non-Functional Requirements:
♣	The manner in which the functional requirements needs to be achieved
♣	Performance, usability, and maintainability
♣	Tend to be on a scale (Not a Yes or No; on a %)
Design Constraints
-	Statements the constrain the ways in which the software can be designed and implemented 
-	Platform, language, BD, wed app, GUI, etc.