*************************************************************************************
Class Notes 05/29 

First day of class! Professor Beaty is in India and won't be back 
until 06/3. Until then the LAs are in charge to help us get all set up.
Today we are focusing on three tasks:

1. Get with our groups
2. Start setting up software and accounts 
3. Go over Syllabus requirements 

My Team:
1. David Kittleson
2. Casey Jones
3. Derek Haviland
4. Edwin Hernandez 
5. Greg Dews
6. Matt Hurt 
7. Daniel L'Episcopo
*************************************************************************************
Class Notes 05/30

Toggl - Make sure you send Toggl URL to your LA

Travis-CI - Runs your code to see any bad commits (looks at code)

SonarCloud - Finds any bugs, security problems, or better ways to handle
code (looks at Design),

TDD (Test Down Development)
- Testing code with increment testing for it to fail until it works
- "Does this unit of code does what I need it to?"
- Do chunks of code work properly?

Codecov - Product Backlog, Sprint Backlog, Doing, and Done. 
*************************************************************************************
Class Notes 06/03

Test 1: The 5 Dysfunctions of a Team
Test 2: Head First Design Patterns

10 Sprints ever week, 1 presentation at the end of each Sprint 
that the Product Owner will present.

"The Real Syllabus" Presentation
- Act confidently, respect others and be polite to others
- Practice self-control, resolve conflict, positive attitude
- Participate in-class, listen, follow directions, and complete work
- ASK FOR HELP WHEN YOU NEED IT
- Positive work ethic, good organizations skills, enhance learning
- "Don't reinvent the wheel" - Cite code that you get from someone else 
- Budget time appropriately 

* Face-to-face communication is much better than any online one 
ever could be

* The person that knows less should be driving while the one who knows 
more should be the one spectating

                        ***STOP COMMENTING YOU CODE*** 
                            (Only Java API Stuff)

* Simple, clean, and short code is best - The method deconstruction should
only have 7 variables per method. That's it. 
*************************************************************************************
Class Notes 06/05

Class Questions/Discussion

-	Previous Sprint Backlog will be added to the next Sprint Backlog. 
-	Demo Day is on Thursday, which the Product Owner will be going through the PowerPoint with the Team.
-	Don’t forget to add the Burndown, Velocity, Story Points, and Code Coverage in the Presentation 
-	“The Customer is NOT Always right” we always need to check in and tell them that it will take longer 
    to develop.
-	Being in a larger team we need to COMMUNICATE WITH THE CUSTOMER (Lauren) so the Product Owner will 
    be the line of communication between the team and her. 
-	We will negotiate with our customer to what will be in our Product Backlog and what they expect us 
    to complete. 
-	“Refractor the code” going back and making it more efficient. 

Intro to Software Engineering Presentation 

-	Most software is just BAD. It cost all of us a ton of money and most of the time that’s a bad thing, 
    but it’s also a good thing. 
-	Software making us a good amount of money, better than digging ditches, and it can be a lot of fun.
-	Famous article “The Cathedral and the Bazar” (Linux)
-	Microsoft bought Github
-	WhatsApp and Wachat are the biggest messaging applications
-	Facebook bought WhatsApp for 19 Billion Dollars

-	WhatsApp was created by 50 software engineers in Silicon Valley
-	A 747 can take 20 million person hours of work – Red Hat Linux 7.1 took 16 million person hours of work
-	The trend of coding between Linux and Microsoft has been exponentially upward. 
-	Writing more code means there will be more bugs in your code
-	College Students 1 -10; Good Programmer: 1-100; Professional Programmer: 1-1000
-	MAIN TAKEAWAY: FUCK C++

-	How many times can we keep things in our head? 7 + or - 2
-	Start making your code better, don’t comment it
-	Bacteria has a million lines of code if you break down the genes 
-	Word was originally started on the Macintosh

-	Mariner, a satellites that was shot into space, flew way because of a conversion error
-	Therac 25, a radiation machine for cancer patients, which ended up overdosing radiation for 6 
    patients and 3 died. It all was an error in the software.
-	Ariane 5, a spacecraft that blew up, which was cause to overflow of the system
-	Mars Climate Orbiter, another spacecraft, drew straight into Mars because of an Imperial and 
    Metric conversion problem. 
-	Stuxnet did cool shit.
*************************************************************************************
Class Notes 05/06

Demo Day Improvements/Ideas from Each Group

Ideas
-	Sprint Review on Friday (whenever we get the Story Points) 
-	Sprint Retrospective on Wednesday
-	DAILY SCRUMS (Hangouts) FUCKING MANDATORY
-	Toggl extension for Chrome

Improvements 

1.	SDLC Statistics need to be improved for next Demo
-	Code Statistics (Created, Deleted, and Modified)
-	SonarCloud
-	Travis-CI 
-	CodeCov
2.	Story Points need to be adjusted (.5)
3.	Estimating our Velocity as a group
4.	Estimated Story Points
5.	Actual Story Points
6.	Total Group Time / Indicate individual Toggl time
7.	What was still in the Product and Sprint Backlogs
8.	Time Estimation for each task
9.	Then the Actual Time it took to complete it

•	Scrum master goes last of the overview of the team for daily stand ups 

Continuation of Software Engineering Presentation

DIA
-	88 airport gates in 3 concourses, 17 mile of track and 5 mile of conveyor belts, etc.
-	The automated never worked: 16 months past its hard deadline, cost the city $560 million 
    over budget, last airline costed them 1 million to keep it going
Chaos 1995
-	$250 billion each year on IT application development of approximately 175,000 Projects 
-	31.1% of projects would be cancelled before they got completed. 
-	Governments spent $81 billion for the cancelled projects
-	Only 16.2% for software projects that are completed on-time and on-budget
No Silver Bullet
-	“There is no single development, in either technology or management technique, which by 
    itself promises even one order of magnitude improvement within a decade in productivity, 
    in reality, in simplicity.” – Fred Brooks
-	Accidental complexity VS. essential complexity
-	There is a difference between an ordinary designer and a great one
Software Engineering 
-	The study and an application of engineering to the design, development, and maintenance of software. 
-	“Anything with REAL science in the name is a wannabe. Computer Science is not a science.”
Terminology 
-	Program Requirements:
♣	Statements that define and qualify what the program needs to do
♣	The work requirements aren’t used in the same way as elsewhere
♣	Software requirements tend to be negotiable.
-	Functional Requirements:
♣	What a program needs to do (Does it do this thing or not?)
♣	Yes/No
-	Non-Functional Requirements:
♣	The manner in which the functional requirements needs to be achieved
♣	Performance, usability, and maintainability
♣	Tend to be on a scale (Not a Yes or No; on a %)
Design Constraints
-	Statements the constrain the ways in which the software can be designed and implemented 
-	Platform, language, BD, wed app, GUI, etc.
*************************************************************************************
Class Notes 06/10

1). Stand up

2). Git Local Commands Presentation (Kat)
- local repository are just on your machine. 
Here are some commands (git - definition - command pallet):
* git int - Initialize a local repository - Git int
* git branch - Create a new branch/version or copy - Git branch/
* git add - Add a file/change to the staging area - Git add/stage
* git commit - Commit changes (from stages) "commit 
message i.e. what the change is" - 
* git merge - Merge a branch int oa target branch - Git merge
* git checkout - Switch to a branch - Git checkout

3). Github Presentation (Luke)
    - Github is a online site to be able to access a remote repository
    - NEVER Push to master. You have to push to develop first then push
    to master
    - Only demo from master
    - Reviewers are required to ensure that the pull request (merge) is 
    good.
    - Push: Sending local code to the remote repository
    - Pull: Taking code from the remote repository to the local machine
    - Merge: Being able to push code from one file to another (like merging
    code from develop to the master)
                         A---B---C---D---M  master
                               \         /
                                 E---F---G    develop
    - Fetch: Searching and pulling any updates from the remote repository 
    if any changes were committed by other developers.
    - Git workflow:
                    Local -> Feature -> Develop -> Master

    Master - Working product
    Develop - Next release of product (team feature)
    Feature - Devs from local
    Local - Individual machine with devs code

*BREAK*

4). Graphs - The Most Used Data Type (Peter)
- Linked Lists are a type of graphs (specialized graph)
- Graphs are vertices: Hold the Data
- Edges: Can have weights 
- GRAPHS ARE LIKE TREES - Very versatile
- How can we use graphs?
    * Networks
    * Advanced Math
    * Machine Learning 
    * Game Development 

- Weighted vs. Unweighted 

Weighted:
Edges have numeric values (distance, importance, etc)

Unweighted:
Edges are all effectively equivalent to their traversal

- Directed vs Undirected

Directed (Digraph):
You can only move along an edge in one direction (via arrows)

Undirected:
You can move along an edge in both directions

Typical Graph Function
Add/Remove vertex
Add/REmove EdgesWeighted?
Directed?
Find Vertex?
Find Edge?

Is it connected?
- given any vertex, can you get to any other vertex through legal 
edge movements
Is it Fully Connected?
- Can every vertex reach ever other vertex through a single edge traversal
Path Exists?
- Does at least one path exist between two given vertices?
- "Can I actually beat this game or is it mathematically impossible?"
Dijkstra's Algorithm
- If a path between two vertices exists, find the shorted path from 
one vertex to the other

How to Represent Graphs?
Adjacent List
- List of Linked List-Each vertex is the head of a linked list 
    * The linked list holds their edges (and eights, if they exist)
Adjacency Matrix
- Matrix of vertices
    * Row and column titles are the vertices
    * Row-column indices are edge weights (or edge existence)

- List vs Matrix

List:
More common
Usually easier to visualize/conceptualize
adding edges is slow
Many algorithms are slow or very individualized

Matrix:
More algorithms are extremely fast in comparison
Searches and traversals very mathematical
adding vertices is slow

Library
- NetworkX (http://networkx.github.io/)
    * Graphs, digraphs, multi-graphs
    * Well tested (>90% coverage)
    * Very 00 complaint 
*************************************************************************************
Class Notes 06/12

1). Stand Up

    1). Since Last Time
        - Finished 5 dysfunctions of a team
        - Researched graphs 
        - Practiced on Python some more
        - NetworkX Tutorial 
        - Make Spike Trello cards
        - Uploaded Notes to my Notes repo
    2). What am I going to do?
        - Read more on graphs
        - Brainstorm with my team (commands)
    3). What blockers do you have?
        - Implementation 

2). Beaty's Stand-up / Questions 
- Everything in Python is considered a "Dictionary" 
- Dictionary: A key value 
- Work on adventure based ideas, verbs, and objects.
- Have a dictionary of a dictionary
    * Outer Dictionary - verbs 
    * Inner Dictionary - objects 
- Python have methods that are first class values 

- Key: {"Go", foo} having a key and referencing a method 
    * Go is the Key
    * foo is the method reference

- "Find out what the strengths are in a programming language and use it
to its advantage. Don't make things difficult for yourself with a
different programming language if you don't have to.

3). Continuation of Software Engineering Presentation

Non-Functional Requirements Examples 
    - Performance
    - Real-time Performance
    - Maintainability
        * Readability
Analysis
    Static - Analyzing the (non-running) code 
        * liters, cyclomatic complex, method length, etc.
        * Pylint, Sonarcloud, radon, Checkstyle
    Dynamic - Analyzing a running programming
        * Spotbugs, Valgrind, and Purify 
!!Testing!! 
    - Acceptance: the customer saying that it meets our requirements 
    - Unit - Method(TDD): Write a test per method (TEST YOUR CODE BEFORE YOU CODE)
        * Write a test before you write any code and make sure that it fails the first
          time and continually test it and commit it(Early and often)
    - Integration - Class: ******
    - System: Check the entire system to make sure that everything is running correctly.
    
    * Blackbox testing: Non-bias code review without even seeing the code
    * 'The Psychology of Programming' a book that talks about how different programmers Work
Unit Testing 
    - Arguably the most important test
    - Many modern SE methods use "Test First"
        1). Write a test
        2). Make sure it fails
        3). Write just enough code to make it work
    - If you don't know how to test it, how can you write it?
    - Correct frame of mind
    - Test-driven Development 

    * "Don't write code that you think you will need tomorrow."
Implementation
    - Software Engineering tends to focus on the requirements, deign, and processes
    - A bad implementation will ruin everything else

    * "What do we mean when we have 'user stories'?" 
Guideline: Style
    - Follow language styles
        * E.g.: 'The Elements of Java Style' by Scott Ambler and Trevor Misfeldt
        * 'Good to Great' book

    * Management is looking at individuals and what unique passions they have
    * Leaders look at people all the same and get them to a specific goal
Guideline: Naming
    - Use good, descriptive names
    - Probably not Hungarian Notation (lol)
        * crszkvc30LastNameCol: a constant reference argument, holding the 
        contents of a database column...Blah,Blah,Blah(we don't do this anymore).
        * Type checking now done by IDE and the compiler
Guideline: Test
    - Every method has unit tests; make them easy to run
    - Tests must be easy to run and run a lot
        * E.g.: Junit
    - TDD
Guideline: Use Libraries 
    - Developed and tested by many others
    - Don't re-implement
        * You need to learn what is possible
        * Yes, you may know how and think you're better, but you're not
        * Write something that no one else has written
Guideline: Reviews
    - Code reviews are very effective for improving quality
    - Knowing that someone else will be looking affects you
    - Others know things you don't 
Guidelines
    - We'll be covering other guidelines such as DRY, YAGNI, SOLID,
      Liskov substitution principle, etc.
    
    * D.R.Y.: Don't repeat your code (that's why we have methods)
Agile
    - Many different process that emphasize short release cycles and that allow changes in design 
    - Focus on human and team aspects

    * Question: What is architecture? A multi-tired and multi-level design of the shared 
      vision that the product encompasses
    * Waterfall - a older cycle design for developers - that uses "successful" projects as 
      frameworks for new projects. However, computing doesn't have any successful projects,
      as well as the fact that projects change all the time. In return we use Agile instead.
    
    - Short releases and iterations
    - Incremental design
    - User involvement
    - Lightweight documentation
    - Informal communication
    - Change 

    * We will continually be testing, implementing, and working in order to help the costumer
    * Show the customer the least amount of functionality at the beginning then continually
      work with the customer until the final product. They will be the happiest at the end
*************************************************************************************
Class Notes 06/13

1). Stand ups 

2). Class discussion 

Architecture Workflow:
    User -> CLI -> Game Engine -> State.yml 
           (View)   (Controller)  (Model - A Design constraint)
         <-      <-             <-
    
    User - The player of the Game
    CLI - 
    GE - 
    yml - A configuration to run a program

R.E.P.L.S - Read - Eval - Print - Loop

Game Engine: 
    1). MAP SYSTEM  - Go all directions (North, East, South, West)
                      Items should also be included as well scattered in the rooms
                      NPCs - A model actor critique 
                    
                            Action1 Action2        
                             ____________
                             |    |     |
                     State 1 |____|____ |
                             |    |     |
                     State 2 |___ | ____|

            State 1                 Action                  State 2
State = (Current Room, Items) -> Pick-Up Sword -> (Current Room, New Item List)
                              |
                              --> Unlock Door -> (New Room, Items)

3). VSCode Top Down Development (TDD) Testing Example:

Look at AddString.py file for example
*************************************************************************************
06/17 Class Notes

1). Stand Up 
    - Since last time?
        * Wrote up a player set up
        * Help Menu Display
        * Title Screen Display
        * Researching on maps 
        * NetworkX
    - What I Will do next time?
        * Check in with my team 
        * Set up some unit testing 
    - Blockers
        * 2nd job changed schedule 

2). Beaty's Lecture 
    - Can't keep 7 things in your head

3). Continuation of Software Engineering Presentation
    Agile 
        * Short releases and iterations
        * Incremental design - All the time we're testing, designing, etc.
        * User Involvement - More user involvement the better the product
        * Lightweight documentation
        * Informal communication 
        * Change - Be ready to respond to change - Willingness suffers 

    Why Agile?
        * Lengthy development times
            - Overall development time not reduced but many releases
        * Difficulty is responding to changing requirements
            - Now change is expected and part of the process
        * All requirements not understood at beginning
        * Too much reliance on heroic effect
        * Processes too complex 
            - RUP: 100 task and 30 roles assigned
            - Too much overhead
        * RUP was too much waste and duplication
            - UML and code
            - Code now source of design 
        ! UML and the program shouldn't be represented in two different forms: Just in the program.
    
    Agile Promises
        * Finished product always available 
        * Normal effort by team
        * Deal with change 
        ! Beware unlimited vacation time (i.e. Uber) !

    What Really Matters?
        * "Human interactions are complicated and never very crisp in their effects, 
          but they matter more than any other aspect of the work." - DeMarco and Lister
        * "Process and technology are a second-order effect on the outcome of a project. 
          The first-order effect is the people" - Cockburn
        ! Beware of the ramifications of the types of job you pick and choose !

    What To Do?
        * How do we manage the teams that are required to produce software?
        * Process hasn't created what it promised
            - Smooth software development
        * People tend to want to control everything
            1). Add more people
            2). When that doesn't work (which it can't), go back to step 1 
        * If process were the answer you'd think we'd've figured it out byy now
            - If it were easy, it'd be does
        * Indeed, process can cause more problems than it solves 
            - Becomes cumbersome and slows progress

    Manifesto for Agile Software Development
        * We are uncovering better ways of developing software by doing it and helping 
          others do it.Through this work we have come to value:
            1). Individuals and interactions over process and tools
            2). Working software over compressive documentation
            3). Customer collaboration over contract negotiation
            4). Responding to change over following a plan
    
    Individuals and Interactions over Process and Tools 
        * Good process won't fix bad team members 
        * Bad process will hinder good team members
        * Everyone must work together to succeed 
        Strong team members not necessarily strongest programmer,
        designer, etc.
            - Communication and interaction make for strong team members 
        * Start small with tools and processes and only increase when truly needed
        * Don't create the environment first
        * Create the team and let them create the environment
    
    Working Software over Comprehensive Documentation 
        * Software without documentation is a disaster
        * Need to describe system and document design decisions
        * Large amounts of doco can become cumbersome and out of sync
        * Knowledge transferred in the team by direct interaction
        * Produce no document unless its need is immediate an significant 

    Customer Collaboration over Contract negotiation
        * Successful projects get customer feedback early and often
        * Best contracts specify how team and customers interact
    
    Responding to Change over Following a Plan
        * Things change, all the time
            - And you might as well accept it 
            - And your customers will be happier with product
        * Team gains knowledge about problem
        * Customers gain knowledge about solution
        * Detailed plans for next two weeks, rough plans for three months, 
          and crude after that
*************************************************************************************
Class Notes 06/19

1). Stand up
    - Since last time?
        * Wrote up new title Screen
        * Read a little of Design Patterns
        * Presentation
        * Graphing
        * Trello
    - What I Will do next time?
        * Pair program with my team 
        * Help out where I can for Demo day
    - Blockers
        * NONE

2). Questions 
    - 200k Peter will go over a presentation on merge conflicts 06/20 @ 12pm

3). What is Design Patterns? - Chapter 1 | Design Patterns 

    Wikipedia
        * A software design pattern is a general reusable solution to a 
         commonly-occurring problems
        * Design patterns are formalized best practices that the programmer can use to solve
          common problems when designing an application or system.
    
    Why Talk About Design Patters?
        * Creates a shared vocabulary
            - Developers can interact in richer terms (shared vocabulary)
        * Keeps thinking/designing at the abstract (pattern) level
            - Creates a better (more flexible, reusable, etc.) designs
    
    Origin
        * Patterns originated as a architectural concept by Christopher Alexander (1977/79)
        * Kent Back and Ward Cunningham developed the ida of applying patterns to programing 
            - specifically pattern languages - and presented their results at the OOPSLA conference 
              each year. 
    
    Christopher Alexander
        * In software, alexander is regarded as the father of the pattern language movement
        * The first wiki - the technology behind Wikipedia - led directly from Alex's work.
        * Books: A Pattern Language: Towns, Buildings, Construction (1977) and The Timeless
          Way of Building (1979)
        * Alexander's Notes on the Synthesis of Form was said to be required reading for 
          researchers in computer science

    Wide Influence
        * will Wright wrote that Alexander's work was influential to the origin of SimCity

    Groups and Concepts
        * Design patterns were originally grouped into the categories 
            - Creational Patterns 
            - Structural Patters 
            - Behavioral Patters
        * Describe using the concepts of 
            - Delegation: Telling something to know what to do
            - Aggregation: Putting things together 
            - Consultation: One object is consulting with another 

        A - Abstraction
        E - Encapsulation
        I - Inheritance 
        0+P - Polymorphism

        ! Fractal: an object which has non-integral dimensions !

    Fist Design Principle
        * Identify the aspects of your application that vary and separate them from what 
          stays the same
        * You can alter or extend without affecting other parts
        * Basis of almost every design pattern
        * Also creates a more easily reusable objects 

    Second Design Principle 
        * Program to an interface, not an implementation
            - Not necessarily a Java interface
            - Program to a supertype 
                * private Map<String, Boolean> urls = new ConcurrentHashMap<String, Boolean>();
            - Can then better use Polymorphism
            - Can more easily chance implementation

        "Always declare variables at the highest implementation" - Beaty
    
    Third Design Principle 
        * Favor composition over Inheritance
        * Favor has-a relationships over is-a relationships (Cat <- Mammal <- Animal)
        * Inheritance limits reusability 
    
    Strategy Pattern
        * Defines a family of algorithms, encapsulates each one, and makes them interchangeable 
        * Strategy lets the algorithm vary independently from the clients that use it

4). The Observer Pattern - Chapter 2 | Design Patterns
    
        The Observer Pattern    
            * Observers are notified when changes are implemented.
        
        More on Observer
            * The observer pattern is a software design pattern in which an object, called the 
              subject, maintains a list of its dependents, called observers, and notifies them 
              automatically of any states changes, usually by calling one of their methods 
            * It is mainly used to implement distributed event handling systems, in "event driven" 
              software 
            * The observer pattern is also a key part in the familiar model-vide-controller (MVC)
              Pattern 

        Design Principle    
            * Strive for loosely-coupled designs between objects that interact 
            * Objects have very little information about each other 
            * No shared state

        Decoupling
            * The observer pattern helps decouple objects
            * The subject knows only that the observer implements the Observer interface
            * New observers can be added at any time
            * New types of observers can be added 
            * Can reuse subjects and observers independently 
            * Changes have no effect on each other 
        
        Warnings
            * don't depend on order of evaluation of notifications
            * Java Observable is a class
                - Not an inheritance
                - Must inherit
                - setChanged() is protected
*************************************************************************************
Class Time 06/20

1). Demo Day:

    Team 1:
        - Funny Presentation 
        - Definition of "Done" for each User Sprint
        - Pictures of Codecov, Travis-CI, etc.

    Team 3:
        - Having a working demo
        - They told their LA that they couldn't finish the User stories
          * Was an excellent teaching lesson because the customer will 
            always expect a lot and the team needs to communicate to 
            them the realistic timeline

    Team 4:
        - Writing up a story to the game 
        - Project vs project plan:
        ________________________________________________________
        | Sprint 1 | Sprint 2 | Sprint 3 | Sprint 4 | Sprint 5 |
        |          |          |          |          |          |
        |          |          |          |          |          |
        ________________________________________________________  
        - Steady workflow, they kept the presentation and demo very 
          simple. We should be doing the same. 
    Team 5:
        - Having a single day that works to meet with everyone

2). Beaty Talks 

    *** Test on 06/27/2019 *****
    *       Scrum Guide        *
    * 5 Dysfunctions of a Team *
    *        Patterns          *
    ****************************

    - Evaluations from each person on the team will be apart of your grade
    - Be careful when signing a Employee Agreement for a company
        * READ WHAT YOU SIGN DUMBASS
    - "Make sure that whatever company you work they want to help you 
      grow and you want to help the company grow" - Beaty

