*************************************************************************************
Class Notes 05/29 

First day of class! Professor Beaty is in India and won't be back 
until 06/3. Until then the LAs are in charge to help us get all set up.
Today we are focusing on three tasks:

1. Get with our groups
2. Start setting up software and accounts 
3. Go over Syllabus requirements 

My Team:
1. David Kittleson
2. Casey Jones
3. Derek Haviland
4. Edwin Hernandez 
5. Greg Dews
6. Matt Hurt 
7. Daniel L'Episcopo

*************************************************************************************
Class Notes 05/30

Toggl - Make sure you send Toggl URL to your LA

Travis-CI - Runs your code to see any bad commits (looks at code)

SonarCloud - Finds any bugs, security problems, or better ways to handle
code (looks at Design),

TDD (Test Down Development)
- Testing code with increment testing for it to fail until it works
- "Does this unit of code does what I need it to?"
- Do chunks of code work properly?

Codecov - Product Backlog, Sprint Backlog, Doing, and Done. 

*************************************************************************************
Class Notes 06/03

Test 1: The 5 Dysfunctions of a Team
Test 2: Head First Design Patterns

10 Sprints ever week, 1 presentation at the end of each Sprint 
that the Product Owner will present.

"The Real Syllabus" Presentation
- Act confidently, respect others and be polite to others
- Practice self-control, resolve conflict, positive attitude
- Participate in-class, listen, follow directions, and complete work
- ASK FOR HELP WHEN YOU NEED IT
- Positive work ethic, good organizations skills, enhance learning
- "Don't reinvent the wheel" - Cite code that you get from someone else 
- Budget time appropriately 

* Face-to-face communication is much better than any online one 
ever could be

* The person that knows less should be driving while the one who knows 
more should be the one spectating

                        ***STOP COMMENTING YOU CODE*** 
                            (Only Java API Stuff)

* Simple, clean, and short code is best - The method deconstruction should
only have 7 variables per method. That's it. 

*************************************************************************************
Class Notes 06/05

Class Questions/Discussion

-	Previous Sprint Backlog will be added to the next Sprint Backlog. 
-	Demo Day is on Thursday, which the Product Owner will be going through the PowerPoint with the Team.
-	Don’t forget to add the Burndown, Velocity, Story Points, and Code Coverage in the Presentation 
-	“The Customer is NOT Always right” we always need to check in and tell them that it will take longer 
    to develop.
-	Being in a larger team we need to COMMUNICATE WITH THE CUSTOMER (Lauren) so the Product Owner will 
    be the line of communication between the team and her. 
-	We will negotiate with our customer to what will be in our Product Backlog and what they expect us 
    to complete. 
-	“Refractor the code” going back and making it more efficient. 

Intro to Software Engineering Presentation 

-	Most software is just BAD. It cost all of us a ton of money and most of the time that’s a bad thing, 
    but it’s also a good thing. 
-	Software making us a good amount of money, better than digging ditches, and it can be a lot of fun.
-	Famous article “The Cathedral and the Bazar” (Linux)
-	Microsoft bought Github
-	WhatsApp and Wachat are the biggest messaging applications
-	Facebook bought WhatsApp for 19 Billion Dollars

-	WhatsApp was created by 50 software engineers in Silicon Valley
-	A 747 can take 20 million person hours of work – Red Hat Linux 7.1 took 16 million person hours of work
-	The trend of coding between Linux and Microsoft has been exponentially upward. 
-	Writing more code means there will be more bugs in your code
-	College Students 1 -10; Good Programmer: 1-100; Professional Programmer: 1-1000
-	MAIN TAKEAWAY: FUCK C++

-	How many times can we keep things in our head? 7 + or - 2
-	Start making your code better, don’t comment it
-	Bacteria has a million lines of code if you break down the genes 
-	Word was originally started on the Macintosh

-	Mariner, a satellites that was shot into space, flew way because of a conversion error
-	Therac 25, a radiation machine for cancer patients, which ended up overdosing radiation for 6 
    patients and 3 died. It all was an error in the software.
-	Ariane 5, a spacecraft that blew up, which was cause to overflow of the system
-	Mars Climate Orbiter, another spacecraft, drew straight into Mars because of an Imperial and 
    Metric conversion problem. 
-	Stuxnet did cool shit.

*************************************************************************************
Class Notes 05/06

Demo Day Improvements/Ideas from Each Group

Ideas
-	Sprint Review on Friday (whenever we get the Story Points) 
-	Sprint Retrospective on Wednesday
-	DAILY SCRUMS (Hangouts) FUCKING MANDATORY
-	Toggl extension for Chrome

Improvements 

1.	SDLC Statistics need to be improved for next Demo
-	Code Statistics (Created, Deleted, and Modified)
-	SonarCloud
-	Travis-CI 
-	CodeCov
2.	Story Points need to be adjusted (.5)
3.	Estimating our Velocity as a group
4.	Estimated Story Points
5.	Actual Story Points
6.	Total Group Time / Indicate individual Toggl time
7.	What was still in the Product and Sprint Backlogs
8.	Time Estimation for each task
9.	Then the Actual Time it took to complete it

•	Scrum master goes last of the overview of the team for daily stand ups 

Continuation of Software Engineering Presentation

DIA
-	88 airport gates in 3 concourses, 17 mile of track and 5 mile of conveyor belts, etc.
-	The automated never worked: 16 months past its hard deadline, cost the city $560 million 
    over budget, last airline costed them 1 million to keep it going
Chaos 1995
-	$250 billion each year on IT application development of approximately 175,000 Projects 
-	31.1% of projects would be cancelled before they got completed. 
-	Governments spent $81 billion for the cancelled projects
-	Only 16.2% for software projects that are completed on-time and on-budget
No Silver Bullet
-	“There is no single development, in either technology or management technique, which by 
    itself promises even one order of magnitude improvement within a decade in productivity, 
    in reality, in simplicity.” – Fred Brooks
-	Accidental complexity VS. essential complexity
-	There is a difference between an ordinary designer and a great one
Software Engineering 
-	The study and an application of engineering to the design, development, and maintenance of 
    software. 
-	“Anything with REAL science in the name is a wannabe. Computer Science is not a science.”
Terminology 
-	Program Requirements:
♣	Statements that define and qualify what the program needs to do
♣	The work requirements aren’t used in the same way as elsewhere
♣	Software requirements tend to be negotiable.
-	Functional Requirements:
♣	What a program needs to do (Does it do this thing or not?)
♣	Yes/No
-	Non-Functional Requirements:
♣	The manner in which the functional requirements needs to be achieved
♣	Performance, usability, and maintainability
♣	Tend to be on a scale (Not a Yes or No; on a %)
Design Constraints
-	Statements the constrain the ways in which the software can be designed and implemented 
-	Platform, language, BD, wed app, GUI, etc.

*************************************************************************************
Class Notes 06/10

1). Stand up

2). Git Local Commands Presentation (Kat)
- local repository are just on your machine. 
Here are some commands (git - definition - command pallet):
* git int - Initialize a local repository - Git int
* git branch - Create a new branch/version or copy - Git branch/
* git add - Add a file/change to the staging area - Git add/stage
* git commit - Commit changes (from stages) "commit 
message i.e. what the change is" - 
* git merge - Merge a branch int oa target branch - Git merge
* git checkout - Switch to a branch - Git checkout

3). Github Presentation (Luke)
    - Github is a online site to be able to access a remote repository
    - NEVER Push to master. You have to push to develop first then push
    to master
    - Only demo from master
    - Reviewers are required to ensure that the pull request (merge) is 
    good.
    - Push: Sending local code to the remote repository
    - Pull: Taking code from the remote repository to the local machine
    - Merge: Being able to push code from one file to another (like merging
    code from develop to the master)
                         A---B---C---D---M  master
                               \         /
                                 E---F---G    develop
    - Fetch: Searching and pulling any updates from the remote repository 
    if any changes were committed by other developers.
    - Git workflow:
                    Local -> Feature -> Develop -> Master

    Master - Working product
    Develop - Next release of product (team feature)
    Feature - Devs from local
    Local - Individual machine with devs code

*BREAK*

4). Graphs - The Most Used Data Type (Peter)
- Linked Lists are a type of graphs (specialized graph)
- Graphs are vertices: Hold the Data
- Edges: Can have weights 
- GRAPHS ARE LIKE TREES - Very versatile
- How can we use graphs?
    * Networks
    * Advanced Math
    * Machine Learning 
    * Game Development 

- Weighted vs. Unweighted 

Weighted:
Edges have numeric values (distance, importance, etc)

Unweighted:
Edges are all effectively equivalent to their traversal

- Directed vs Undirected

Directed (Digraph):
You can only move along an edge in one direction (via arrows)

Undirected:
You can move along an edge in both directions

Typical Graph Function
Add/Remove vertex
Add/REmove EdgesWeighted?
Directed?
Find Vertex?
Find Edge?

Is it connected?
- given any vertex, can you get to any other vertex through legal 
edge movements
Is it Fully Connected?
- Can every vertex reach ever other vertex through a single edge traversal
Path Exists?
- Does at least one path exist between two given vertices?
- "Can I actually beat this game or is it mathematically impossible?"
Dijkstra's Algorithm
- If a path between two vertices exists, find the shorted path from 
one vertex to the other

How to Represent Graphs?
Adjacent List
- List of Linked List-Each vertex is the head of a linked list 
    * The linked list holds their edges (and eights, if they exist)
Adjacency Matrix
- Matrix of vertices
    * Row and column titles are the vertices
    * Row-column indices are edge weights (or edge existence)

- List vs Matrix

List:
More common
Usually easier to visualize/conceptualize
adding edges is slow
Many algorithms are slow or very individualized

Matrix:
More algorithms are extremely fast in comparison
Searches and traversals very mathematical
adding vertices is slow

Library
- NetworkX (http://networkx.github.io/)
    * Graphs, digraphs, multi-graphs
    * Well tested (>90% coverage)
    * Very 00 complaint 

*************************************************************************************
Class Notes 06/12

1). Stand Up

    1). Since Last Time
        - Finished 5 dysfunctions of a team
        - Researched graphs 
        - Practiced on Python some more
        - NetworkX Tutorial 
        - Make Spike Trello cards
        - Uploaded Notes to my Notes repo
    2). What am I going to do?
        - Read more on graphs
        - Brainstorm with my team (commands)
    3). What blockers do you have?
        - Implementation 

2). Beaty's Stand-up / Questions 
- Everything in Python is considered a "Dictionary" 
- Dictionary: A key value 
- Work on adventure based ideas, verbs, and objects.
- Have a dictionary of a dictionary
    * Outer Dictionary - verbs 
    * Inner Dictionary - objects 
- Python have methods that are first class values 

- Key: {"Go", foo} having a key and referencing a method 
    * Go is the Key
    * foo is the method reference

- "Find out what the strengths are in a programming language and use it
to its advantage. Don't make things difficult for yourself with a
different programming language if you don't have to.

3). Continuation of Software Engineering Presentation

Non-Functional Requirements Examples 
    - Performance
    - Real-time Performance
    - Maintainability
        * Readability
Analysis
    Static - Analyzing the (non-running) code 
        * liters, cyclomatic complex, method length, etc.
        * Pylint, Sonarcloud, radon, Checkstyle
    Dynamic - Analyzing a running programming
        * Spotbugs, Valgrind, and Purify 
!!Testing!! 
    - Acceptance: the customer saying that it meets our requirements 
    - Unit - Method(TDD): Write a test per method (TEST YOUR CODE BEFORE YOU CODE)
        * Write a test before you write any code and make sure that it fails the first
          time and continually test it and commit it(Early and often)
    - Integration - Class: ******
    - System: Check the entire system to make sure that everything is running correctly.
    
    * Blackbox testing: Non-bias code review without even seeing the code
    * 'The Psychology of Programming' a book that talks about how different programmers Work
Unit Testing 
    - Arguably the most important test
    - Many modern SE methods use "Test First"
        1). Write a test
        2). Make sure it fails
        3). Write just enough code to make it work
    - If you don't know how to test it, how can you write it?
    - Correct frame of mind
    - Test-driven Development 

    * "Don't write code that you think you will need tomorrow."
Implementation
    - Software Engineering tends to focus on the requirements, deign, and processes
    - A bad implementation will ruin everything else

    * "What do we mean when we have 'user stories'?" 
Guideline: Style
    - Follow language styles
        * E.g.: 'The Elements of Java Style' by Scott Ambler and Trevor Misfeldt
        * 'Good to Great' book

    * Management is looking at individuals and what unique passions they have
    * Leaders look at people all the same and get them to a specific goal
Guideline: Naming
    - Use good, descriptive names
    - Probably not Hungarian Notation (lol)
        * crszkvc30LastNameCol: a constant reference argument, holding the 
        contents of a database column...Blah,Blah,Blah(we don't do this anymore).
        * Type checking now done by IDE and the compiler
Guideline: Test
    - Every method has unit tests; make them easy to run
    - Tests must be easy to run and run a lot
        * E.g.: Junit
    - TDD
Guideline: Use Libraries 
    - Developed and tested by many others
    - Don't re-implement
        * You need to learn what is possible
        * Yes, you may know how and think you're better, but you're not
        * Write something that no one else has written
Guideline: Reviews
    - Code reviews are very effective for improving quality
    - Knowing that someone else will be looking affects you
    - Others know things you don't 
Guidelines
    - We'll be covering other guidelines such as DRY, YAGNI, SOLID,
      Liskov substitution principle, etc.
    
    * D.R.Y.: Don't repeat your code (that's why we have methods)
Agile
    - Many different process that emphasize short release cycles and that allow changes in design 
    - Focus on human and team aspects

    * Question: What is architecture? A multi-tired and multi-level design of the shared 
      vision that the product encompasses
    * Waterfall - a older cycle design for developers - that uses "successful" projects as 
      frameworks for new projects. However, computing doesn't have any successful projects,
      as well as the fact that projects change all the time. In return we use Agile instead.
    
    - Short releases and iterations
    - Incremental design
    - User involvement
    - Lightweight documentation
    - Informal communication
    - Change 

    * We will continually be testing, implementing, and working in order to help the costumer
    * Show the customer the least amount of functionality at the beginning then continually
      work with the customer until the final product. They will be the happiest at the end

*************************************************************************************
Class Notes 06/13

1). Stand ups 

2). Class discussion 

Architecture Workflow:
    User -> CLI -> Game Engine -> State.yml 
           (View)   (Controller)  (Model - A Design constraint)
         <-      <-             <-
    
    User - The player of the Game
    CLI - 
    GE - 
    yml - A configuration to run a program

R.E.P.L.S - Read - Eval - Print - Loop

Game Engine: 
    1). MAP SYSTEM  - Go all directions (North, East, South, West)
                      Items should also be included as well scattered in the rooms
                      NPCs - A model actor critique 
                    
                            Action1 Action2        
                             ____________
                             |    |     |
                     State 1 |____|____ |
                             |    |     |
                     State 2 |___ | ____|

            State 1                 Action                  State 2
State = (Current Room, Items) -> Pick-Up Sword -> (Current Room, New Item List)
                              |
                              --> Unlock Door -> (New Room, Items)

3). VSCode Top Down Development (TDD) Testing Example:

Look at AddString.py file for example

*************************************************************************************
06/17 Class Notes

1). Stand Up 
    - Since last time?
        * Wrote up a player set up
        * Help Menu Display
        * Title Screen Display
        * Researching on maps 
        * NetworkX
    - What I Will do next time?
        * Check in with my team 
        * Set up some unit testing 
    - Blockers
        * 2nd job changed schedule 

2). Beaty's Lecture 
    - Can't keep 7 things in your head

3). Continuation of Software Engineering Presentation
    Agile 
        * Short releases and iterations
        * Incremental design - All the time we're testing, designing, etc.
        * User Involvement - More user involvement the better the product
        * Lightweight documentation
        * Informal communication 
        * Change - Be ready to respond to change - Willingness suffers 

    Why Agile?
        * Lengthy development times
            - Overall development time not reduced but many releases
        * Difficulty is responding to changing requirements
            - Now change is expected and part of the process
        * All requirements not understood at beginning
        * Too much reliance on heroic effect
        * Processes too complex 
            - RUP: 100 task and 30 roles assigned
            - Too much overhead
        * RUP was too much waste and duplication
            - UML and code
            - Code now source of design 
        ! UML and the program shouldn't be represented in two different forms: Just in the program.
    
    Agile Promises
        * Finished product always available 
        * Normal effort by team
        * Deal with change 
        ! Beware unlimited vacation time (i.e. Uber) !

    What Really Matters?
        * "Human interactions are complicated and never very crisp in their effects, 
          but they matter more than any other aspect of the work." - DeMarco and Lister
        * "Process and technology are a second-order effect on the outcome of a project. 
          The first-order effect is the people" - Cockburn
        ! Beware of the ramifications of the types of job you pick and choose !

    What To Do?
        * How do we manage the teams that are required to produce software?
        * Process hasn't created what it promised
            - Smooth software development
        * People tend to want to control everything
            1). Add more people
            2). When that doesn't work (which it can't), go back to step 1 
        * If process were the answer you'd think we'd've figured it out byy now
            - If it were easy, it'd be does
        * Indeed, process can cause more problems than it solves 
            - Becomes cumbersome and slows progress

    Manifesto for Agile Software Development
        * We are uncovering better ways of developing software by doing it and helping 
          others do it.Through this work we have come to value:
            1). Individuals and interactions over process and tools
            2). Working software over compressive documentation
            3). Customer collaboration over contract negotiation
            4). Responding to change over following a plan
    
    Individuals and Interactions over Process and Tools 
        * Good process won't fix bad team members 
        * Bad process will hinder good team members
        * Everyone must work together to succeed 
        Strong team members not necessarily strongest programmer,
        designer, etc.
            - Communication and interaction make for strong team members 
        * Start small with tools and processes and only increase when truly needed
        * Don't create the environment first
        * Create the team and let them create the environment
    
    Working Software over Comprehensive Documentation 
        * Software without documentation is a disaster
        * Need to describe system and document design decisions
        * Large amounts of doco can become cumbersome and out of sync
        * Knowledge transferred in the team by direct interaction
        * Produce no document unless its need is immediate an significant 

    Customer Collaboration over Contract negotiation
        * Successful projects get customer feedback early and often
        * Best contracts specify how team and customers interact
    
    Responding to Change over Following a Plan
        * Things change, all the time
            - And you might as well accept it 
            - And your customers will be happier with product
        * Team gains knowledge about problem
        * Customers gain knowledge about solution
        * Detailed plans for next two weeks, rough plans for three months, 
          and crude after that

*************************************************************************************
Class Notes 06/19

1). Stand up
    - Since last time?
        * Wrote up new title Screen
        * Read a little of Design Patterns
        * Presentation
        * Graphing
        * Trello
    - What I Will do next time?
        * Pair program with my team 
        * Help out where I can for Demo day
    - Blockers
        * NONE

2). Questions 
    - 200k Peter will go over a presentation on merge conflicts 06/20 @ 12pm

3). What is Design Patterns? - Chapter 1 | Design Patterns 

    Wikipedia
        * A software design pattern is a general reusable solution to a 
         commonly-occurring problems
        * Design patterns are formalized best practices that the programmer can use to solve
          common problems when designing an application or system.
    
    Why Talk About Design Patters?
        * Creates a shared vocabulary
            - Developers can interact in richer terms (shared vocabulary)
        * Keeps thinking/designing at the abstract (pattern) level
            - Creates a better (more flexible, reusable, etc.) designs
    
    Origin
        * Patterns originated as a architectural concept by Christopher Alexander (1977/79)
        * Kent Back and Ward Cunningham developed the ida of applying patterns to programing 
            - specifically pattern languages - and presented their results at the OOPSLA conference 
              each year. 
    
    Christopher Alexander
        * In software, alexander is regarded as the father of the pattern language movement
        * The first wiki - the technology behind Wikipedia - led directly from Alex's work.
        * Books: A Pattern Language: Towns, Buildings, Construction (1977) and The Timeless
          Way of Building (1979)
        * Alexander's Notes on the Synthesis of Form was said to be required reading for 
          researchers in computer science

    Wide Influence
        * will Wright wrote that Alexander's work was influential to the origin of SimCity

    Groups and Concepts
        * Design patterns were originally grouped into the categories 
            - Creational Patterns 
            - Structural Patters 
            - Behavioral Patters
        * Describe using the concepts of 
            - Delegation: Telling something to know what to do
            - Aggregation: Putting things together 
            - Consultation: One object is consulting with another 

        A - Abstraction
        E - Encapsulation
        I - Inheritance 
        0+P - Polymorphism

        ! Fractal: an object which has non-integral dimensions !

    First Design Principle
        * Identify the aspects of your application that vary and separate them from what 
          stays the same
        * You can alter or extend without affecting other parts
        * Basis of almost every design pattern
        * Also creates a more easily reusable objects 

    Second Design Principle 
        * Program to an interface, not an implementation
            - Not necessarily a Java interface
            - Program to a supertype 
                * private Map<String, Boolean> urls = new ConcurrentHashMap<String, Boolean>();
            - Can then better use Polymorphism
            - Can more easily chance implementation

        "Always declare variables at the highest implementation" - Beaty
    
    Third Design Principle 
        * Favor composition over Inheritance
        * Favor has-a relationships over is-a relationships (Cat <- Mammal <- Animal)
        * Inheritance limits reusability 
    
    Strategy Pattern
        * Defines a family of algorithms, encapsulates each one, and makes them interchangeable 
        * Strategy lets the algorithm vary independently from the clients that use it

4). The Observer Pattern - Chapter 2 | Design Patterns
    
        The Observer Pattern    
            * Observers are notified when changes are implemented.
        
        More on Observer
            * The observer pattern is a software design pattern in which an object, called the 
              subject, maintains a list of its dependents, called observers, and notifies them 
              automatically of any states changes, usually by calling one of their methods 
            * It is mainly used to implement distributed event handling systems, in "event driven" 
              software 
            * The observer pattern is also a key part in the familiar model-vide-controller (MVC)
              Pattern 

        Design Principle    
            * Strive for loosely-coupled designs between objects that interact 
            * Objects have very little information about each other 
            * No shared state

        Decoupling
            * The observer pattern helps decouple objects
            * The subject knows only that the observer implements the Observer interface
            * New observers can be added at any time
            * New types of observers can be added 
            * Can reuse subjects and observers independently 
            * Changes have no effect on each other 
        
        Warnings
            * don't depend on order of evaluation of notifications
            * Java Observable is a class
                - Not an inheritance
                - Must inherit
                - setChanged() is protected
*************************************************************************************
Class Time 06/20

1). Demo Day:

    Team 1:
        - Funny Presentation 
        - Definition of "Done" for each User Sprint
        - Pictures of Codecov, Travis-CI, etc.

    Team 3:
        - Having a working demo
        - They told their LA that they couldn't finish the User stories
          * Was an excellent teaching lesson because the customer will 
            always expect a lot and the team needs to communicate to 
            them the realistic timeline

    Team 4:
        - Writing up a story to the game 
        - Project vs project plan:
        ________________________________________________________
        | Sprint 1 | Sprint 2 | Sprint 3 | Sprint 4 | Sprint 5 |
        |          |          |          |          |          |
        |          |          |          |          |          |
        ________________________________________________________  
        - Steady workflow, they kept the presentation and demo very 
          simple. We should be doing the same. 
    Team 5:
        - Having a single day that works to meet with everyone

2). Beaty Talks 

    *** Test on 06/27/2019 *****
    *       Scrum Guide        *
    * 5 Dysfunctions of a Team *
    *        Patterns          *
    ****************************

    - Evaluations from each person on the team will be apart of your grade
    - Be careful when signing a Employee Agreement for a company
        * READ WHAT YOU SIGN DUMBASS
    - "Make sure that whatever company you work they want to help you 
      grow and you want to help the company grow" - Beaty

*************************************************************************************
Class Notes 06/24

1). Stand up
     - Since last time?
       Pair programmed for the maze (pre-maze, testing, and Yaml parser)
       Review Scrum Guide, Five Dysfunctions
       Finished Patterns
     - What I Will do next time?
       Check in with my team 
       Work on maze some more 
     - Blockers
       None - Thanks to Lauren

       Scrum Master: 
       Team Blocker - Casey's CLI I

2). Beaty's Discussion and Question/Answers

    !!! SEND PUBLIC AND PRIVATE TRELLO URL AND REPO TO BEATY !!!

3). The Decorator Pattern - Chapter 3 | Design Patterns

    The Open/Close Principle
        * Designs should be open for extension, but closed for modification
    
    Decorators
        * Have the same super type of the objects they decorate
        * Can have one or more decorators
        * Can pass wrapped object anywhere original could be passed
        * Adds behavior before and/or after delegating object
        * Objects can be decorated at runtime 

        Python is "Duck Typing" or a particular method is allowed to be called. No inheritance.
        All variables are considered as objects. No Base types.

    The Decorator Patterns
        * Attaches additional responsibilities to an object dynamically
        * Provide a flexible alternative to sub-classing for extending functionality
    
    Inheritance
        * Using inheritance to get type matching but not behavior
            - Java requires this, other languages don't 

4). The Factory Pattern - Chapter 4 | Design Patterns

    Factories 
        * Handles the details of object creation
            - Encapsulates the creation in a subclass
            - Decouples interface from creation 
        * Can return a variety of types 
        * Client doesn't care which type 
        * Can add additional types easily
        * If static, can't subtype to extend
    
    Wikipedia
        * "The factory method pattern is a creational pattern that uses factory methods 
          to deal with the problem of creating objects without having to specify the 
          exact class of the object that will be created."
        * High-level modules should not depend on low-level modules 
            - Both should depend on abstractions
        * Abstractions should not depend on details
    
    Abstraction 
        * Factories don't have to be abstract
            - Can have default and that can call down if necessary

    The Dependency Inversion Principle
        * Depend upon abstractions
        * Do not depend upon concrete classes 

        Policy Layer ---> Mechanism Layer ---> Utility Layer

        Invert that shit:

        Policy Layer ---> Interface Policy Service Interface
                            |
                            Mechanism Layer ---> Interface mechanism Service Interface
                                                |
                                                Utility Layer 
    
    Therefore
        * No variable should hold a reference to a concrete class
        * No class should derive from a concrete class
        * No method should override an implemented method of any of its base classes

    Dependency Injection
        * A technique whereby one object (or static method) supplies the dependencies 
          of another object
        * A dependency ts an object that can be used (a service)
        * An injection is the parsing of a dependency to a dependent object (a client)
          that would use it
        * The service is made part of the client's state

        * Passing the service to the client, rather than allowing a client to build or 
          fine the service, is the fundamental requirement of the pattern.
        * A fundamental requirement means that using values (services) produced within
          the class from new or static methods is prohibited.
        * The client should accept values passed in from outside
        * This allows the client to make acquiring dependencies someone else's problem
        * The intent behind dependency injection is to decouple objects to the extent
          that no client code as to...

    Inversion of Control (Very Very Important)
        * A design principle in which custom-written portions of a computer program
          receive the flow of control from a generic framework.
        * A software architecture with this deign inverts control as compared to traditional 
          procedural programing:
           - In traditional programming, the custom code that expresses the purpose of the program
             calls into reusable libraries to take care of generic tasks.
           - With inversion of control, it is the framework that calls into the custom, or task-specific,
             code. 
            
             "Framework calls us. A library doesn't" - Beaty

    Abstract Factory Pattern
        * Provides an interface for creating families of related or dependent objects without specifying 
         their concrete families. 
    
    Abstract Verses Non
        * Factory
            - Creation through inheritance
            - Created objects of a single type
        * Abstract Factory
            _ Creation through composition
            - Instantiated via new and passed
            - Created families of related objects via factories

5). The Singleton - Chapter 5 | Design Patterns

    Need Only One Of 
        * Thread pools, caches, dialog boxes, preferences, logging, device drivers, I/O
        * But: might not need each time, so lazy initialization 

    !!! SEND DEREK REST OF NOTES !!!

    Pattern
        * Ensured...
    Threading 
        * Synchronize get...
        * Double-Checked Locking
    Visibility and Synchronization
        * Visibility assures that all threads read that same values of a variable
        * Synchronization
    Volatile
        * Reads and writes happen to main memory
            - Not from individual CPU caches
        * Writes to a volatile also write all the thread-visible variables to main memory
        * Reads from a volatile re-read all thread-visible variables from main memory 
    Atomic
        * Reads and writes are atomic for reference variables and for most primitive variables
         (except long anf double)
        * Reads and writes are atomic for all variables declared volatile (including long and 
          double variables)
        * There are also atomicInt and atomicLong
    Volatile Is Not Always Enough 
        * If there is a read/modify/write such as variable++
        * Must use synchronized keyword to remove 

        Book Recommendation: Java Concurrency In Practice by Brian Goetz (Good book for OS 
        in the Fall)

*************************************************************************************
Class Notes 06/26

1). Stand Up 
     - Since last time?
       Worked on testing  
       Reviewed my notes for midterm tomorrow
       Went to the Tutoring center 
       Pair programmed w
     - What I Will do next time?
       Check in with my team 
       Finish up maze by tonight
       Pair program
     - Blockers
       Mocking

       Matt, Derek, and Casey:
       Matt - had to take care of some things - No blockers thanks to Greg
       Derek - Couldn't get out of work - No blockers
       Casey - NA - No blockers?

       Team Blockers:
       Mocking
       Communication
       
2). Beaty Discussion
    - TEST TOMORROW 

3). Command Pattern - Chapter 6 | Design Patterns

    Wikipedia
        * A behavioral design pattern in which an object is used to encapsulate all information.
    Participants
        * Client is responsible for creating a concrete command and setting its receiver.
        * Invoke holds a command object and at some points calls its execute() method...

4). Adapter and Facade - Chapter 7 | Design Patterns 

    The Adapter Pattern
        * Converts the interface of a class into another interface the clients expect
        * Adapter let classes wok together that couldn't otherwise because of incompatible 
          interfaces.
    Two types
        * Object adapters use composition
        * ...
    Principle of Least Knowledge
        * Talk to only immediate friends
        * Decouples
        * Law of Demeter
        * Methods may talk to
            - Their own object
            - Objects passed as parameters
            - Objects they instantiate 
            - Instance variables

5). Template Method - Chapter 8 | Design Patterns

    Wikipedia
        * Behavioral design pattern that defines the program skeleton of an algorithm in 
        a operation deferring some steps of a subclass
        * It lets one redefine certain steps of an algorithm without changing the algorithm's 
          structure
    Hot Beverage 
        * for both coffee and teaching 
            - Hot water (same, in base class)
            - Use hot water to extract (different, abstract in base class)
            - Pour into cup (stays the same)
            - Add condiments (will be different or change)
        * prepareRecipe is template method
    prepareRecipe
        * Is template method
        * All steps present
    Hooks
        * Can define concrete methods that do nothing unless subclass overrides them
        * Use abstract when subclass must implement, hooks when optional 
    Hollywood Principle
        * "Don't call us, we'll call you" (lol)
        * Low-level hooks into system, high-level calls at the appropriate time
        * Java Arrays.sort calls compareTo()
    Summary
        * To prevent subclasses from changing the algorithm, make the template method final
        * Both the strategy and template patterns encapsulate algorithms
            - Strategy via composition
            - Template via inheritance
        * Factory is a very specialized template
            - Returns result from subclass
    
        "Factories are abstract" - Beaty 

*************************************************************************************
Class Notes 07/01

1). Stand Up

2). The Iterator Pattern - Chapter 9 | Design Patterns

    ...

    Java
        * Enumeration is the older that has been replaced by iterator
            - iterator allows removal
    Design Principle
        * A class should have only one reason to change 
            - Single-responsibility principle
        * High cohesion
            - All methods related to purpose 
        Question: What is coupling?
        Cohesion - "every method should touch every instance variables"
    Composite Pattern
        * Allows you to compose objects into tree structure to represent part/whole hierarchies
        * Composite allows clients to treat individual objects and compositions of objects
        uniformity
        * We can apply the same operations over both composites and individual objects
        * Can ignore differences between the two - think recursion
    Part/Whole 
        * Animals, mammals, cats, etc.
            - Respiration, locomotion, etc.
        * Objects in a science
            - Texture, stuff, etc.

3). The State Pattern - Chapter 10 | Design Patterns

    State
        * The combination of the value of all the variables in an object
        * We use state machines all of the time  
            - NFAs, DFAs
        * Automata
            - Combinational logic
            - Finite State machines
            - Pushdown
            - Turing Machine
        * Examples: Vending machines, elevator, locks, traffic lights, etc.
        * Finite State Machine is limited to the amount of memory it has 
    State Pattern
        * Allows an object to alter its behavior when its internal state changes
        * The object will appear to change its class
        * Very similar to strategy pattern
            - Strategy an alternative to sub-classing as it uses composition
            - ...
        "Decorate pattern makes code much easier to read"

4). Getting a Job

    The Great American Know Who
        * I've known people at many jobs I've landed
        * Networking helps
        * 
    # 1's 
        * Maintaining your GPA is the #1 thing you can do
        * Impressing people in your classes is the other #1 thing you can do
    LinkedIn
        * Join it
    MeetUp 
        * Find a meetup that matches your interests in a job
        * DJUG 
    Twitter
        * Maybe join it?
    STOP
        * Gaming 
            - Get off the couch
        * Facebook, Instagram
        * Watching your favorite sports
        * Wasting your time 
            - Time is all we have
        * Everyone is an expert at something
            - Choose wisely
    START
        * Learn about your field of interest
        * Being relatable 
            - Be able to interact with the non-geek
        * Be nice
        * Branching out
            - New languages, etc.
    Why is Anyone Hired?
        * Because someone is willing to pay to have a solution to their problem
        * Be the solution
    Do the job Before you fet the job
        * Do research on the company and the position
        * What tech do they use?
    Market yourself
        * Print Business cards
            - non-school email address
            - Your Twitter, LinedIn, Github, etc.
        * Github
            - Your school work
            - Gists (Github blog)
        * Blog 
        * Write a paper or two
            - Undergraduate research
        * Create and give a presentation or two
    Resumes
        * Resume will first be filtered by an HR program be buzzword compliant
        * ~5 seconds to catch someone's attention
    DON'T
        * Put your address
            - You're willing to commute or work from home 
        * Don't use your school email address
        * Cute/funny email address and Github login 
        * Don't list required concourses
            - List your electives
        * Don't list your IDEs 
        * Mention desktop applications 
        * Put in objectives
            - Your objective is to get a job (That's it)
            - Objectives and targeted info can go in a cover letter
    DO 
        * Put in your Github and LinkedIn urls
        * List your languages, either in order (or with level) of experience
            - Beginner, intermediate, Advanced
        * List Scrum, Github, Design Patterns, TDD, Travis, SonarCloud
        * Mention Linux
        * Say what your role was and what you actually accomplished
            - Not what you were "responsible for"
        * Spelling/Grammar/Formatting
            - Don't change fonts, justification, etc.

*************************************************************************************
Class Notes 07/03

1). Demo Day
    * Had something to demo but went horribly. 

3). Exam Turned Back - 105! (What the fuck?...)

2). Getting a Job Presentation Continuation

    Interviewing
        ...
    Overall
        * Arrive at least 15 minutes early, but enter 8-10 minutes early
        * Bring a notepad and pen to take notes
        * Bring extra resumes
        * Follow up! 
            * The same day
            * Say thanks, you know how much it is, if there is anything 
            else you can provide to help
    Personal 
        * Dress well
        * Eye contact 
        * Body language 
            - Don't cross your arms or legs 
            - Lean towards the person you're talking to
            - Avoid your nervous habits
        Don't wear Axe 
            - Many people are sensitive/allergic to artificial smells
    What You want
        * Interview them as much as you can
            - You don't want to work for just any place
            - Unless you can grit your teeth for a year and build your resume
            - Maybe check out https://www.glassdoor.com/
        * Working at some places is worse than not working in the field for a time
            - Trailing edge technology that traps you
            - A place you can't excel in 
            - Churn and burn 
        * Questions to ask: 
            1). "Why do you like this job?", 
            2). "How much does it cost to replace a employee?"
            3). "Is lateral movement possible?"
            4). "How do you support my personal development?"
            5). "What is the schedule like?" 
            6). "Do you think I will be a good fit here?"

            ACM Tech news 
            "The Morning Paper"

*************************************************************************************
Class Notes 07/08

1). Stand up 
    - Since last time?
       Helped with the Trello  
       Read a bit effective Java + notes
     - What I Will do next time?
       Check up with team
       Pair program
     - Blockers
       None

2). Sprint Review User Story Breakdown
    1   2   3   5   8   13  21

    User Story: Hold Items - Player and Room

    Room:
    - Test for existence [3]
    - Add to list [2]
    - Remove form list [2]

    Player:
    - Test for existence [3]
        * Can we have multiple multiple 
        * Edge cases
    - Add to list [2]
    - Removal from list [2]

    Room: need to research yaml for a load and save

    Spike Ticket - Research save/load from Yaml
        1). Put in Backlog
        2). Finish breaking up for later 

    Game --> Rooms ---> Items
    |           |        ^
    |           |        |
    |           |--------> Player
    Player                  |
    (user) <----------------|

3). Getting a Job Presentation Continuation

    What You Want
        * Working at some places is worse than not working in the field for a time
            - Trailing edge technology that traps you
            - A place you can't excl in
            - Churn and burn
    What to Ask
        * "Why do you work here?"
        * "What are the working conditions?"
        * "What SE lifecycle is used?"
        * "What is the tool chain?"
        * HR
            - How are the benefits?
                * Health, vacation, retirement?
    Types of Questions
        * Computer Science Questions
        * What have you done?
    Computer Science
        * Algorithms and data structures
        * O of algorithms and choosing 
        * Imperative vs. Functional
        http://wwww.nerdparadise.com/tech/interview (Questions that might be asked)
    What Have You Done?
        * Make sure you did what is on your resume are ready to talk about it
        * They are looking for specifics
        * Give a concrete example
        * If you don't have an example, say so 
    Language 
        * When would you use an anonymous inner class in Java?
        * What's a lamda?
            - Know your versions
        * What's a closure?
        "Tell them what you know and what you don't know!" - Beaty
    OO 
        * What are the major features of OO?
            - Abstraction, encapsulation, inheritance, and polymorphism
        * What is an interface?
        * ...
        * Deep vs. Shallow composites
        * Dependency inversion/inversion of control
            - frameworks
        * Design Patterns
    Do Me A SOLID
        * S - Single-responsibility principle
        * O - Open-closed principle
        * L - Liskov substitution principle
        * I - Interface segregation principle
        * D - Dependency Inversion Principle
    OS
        * Concurrency 
            - Thread vs. Process
    Networks
        * IP v4/6 addressing 
        * TCP vs UCP
    Software Engineering
        * Git, Github
        * Agile Manifesto
        * TDD
        * DRY, YAGNI
        * CI/CD
    Web
        * MVC
        * ORM
        * Ajax
    Questions
        * "Why are manhole covers round?"
        * "What is 2^24?"
        * "How usable addresses in a class C network?"
        * "What are your strengths and weaknesses?"
            - No kidding, you should know 
        * "Why do you want to work here?"
            - Have an actual answer. Not just money
    Tough Questions
        * They typically will ask a few very difficult Questions
            - Show off 
            - To see how you reason
        * How many trees are in the CONUS?
        * How far away is the moon?
    Verbal Hints
        * "We speak not only to tell other people what we think, 
        but to tell ourselves what we think. Speech is a part of thought." - Oscar Wilde
        * Don't say "I feel like"
            - No one cared how you feel
            - You hopefully mean "I think" or "I believe"
        * Try to avoid "like"
            - Unless you're making a simile
            - Also, "um", "you know", and "got"
        * Don't use "literally"
        * Irregardless is not a Word
            - Regardless is 
            - Irrespective is
        * Don't say "methodology"
        * The word "data" is plural
        * Don't make jokes - unless you're an expert lol
        * Be terse and don't Bullshit
    Guerrilla Interviewing
        * Looking for smart people to get things done
        * Introduction
        * Question about recent project candidate worked on 
        * Easy Programming Question
        * Pointer/Recursion Question
        * Do you have any questions? - YES, YES YOU DO!
        "Is there anything that I could have done better?" OR 
        "Is there something I can improve upon?"
    Some Typical Questions 
        * Please tell me about yourself
        * What makes you interested in this position?
        * Why did you choose this field?
        * etc.
    Resources 
        * Book Recommendation: Cracking the Code
        * Book Recommendation: Hire With You Head

*************************************************************************************
Class Notes 07/10

Was Not in class. Notes from Matt Hurt:

* Consider Static Factory Methods instead of Constructors
   * One advantage is they have names
       * Constructors do not and one has to differentiate via parameters
       * This can be confusing and lead to errors
   * A class can have only one constructor with a given name
       * Don’t change order of constructor parameters to differentiate
   * Static factory methods don’t have to create a new object
       * Constructors alway do
       * Maybe there’s an object already created that works
       * Helps with immutable classes and pre-constructed instances
   * Singletons, flyweights, non-instantiable
       * Singletons don’t play well with each other in Python.
   * Can return a subtype
       * java.util.collections contains all static methods that work on may types
       * polymorphic
       * addAll, binarySearch, disjoint, frequency, min, max, sort, shuffle, reverse, ...
       * Type returned can be non-public
       * Can vary implementation
       * Returned class ned not exist at the time the class is written
           * Allows run-time specification
           * JDBC an example
   * Service provider framework
       * Service interface
       * Provider registration
       * Service access
       * Optional service provider interface
           * Factory to create service provider
   * Java 6
       * General-purpose java.util.ServiceLoader
           * So you don’t have to write your own
   * Disadvantages
       * Classes without public or protected constructors cannot be sub-classed
       * Not called out in Javadoc
   * Popular Java static factory names
       * valueOf, getInstance, newInstance, getType,...
   * Consider a Builder when Faced with Many Constructor Parameters
   * Consider a Builder when faced with many constructor parameters
   * Create empty instance and have many set()s
       * Problem instance in inconsistent state
   * Builder pattern
   * Build() is a parameter-less static method
   * Required parameters passed in to constructor
       * Optionals set()
       * Other languages have optional parameters instead
* Builder for class hierarchies
   * Recursive type parameters
   * “Abstract class pizza” - page
* New York Pizza (book)
   * Builder gets called with a size and objects call requireNonNull(size)
   * When you are extending an abstract class it
* Calzone
* Enforce the singleton property with a private constructor or an enum type
   * Up to 1.5, two ways….
* Private no-Arg constructor
* 1.5: Enumeration
* Enforce non_insatiability with private constructor
   * Just have a private no-args constructor
       * If have any no-args constructor, the default isn’t created
   * Class connote be sub-classed
       * Subclasses would need to call constructor
       * Might want to have constructor throw and AssertionError
           * Just be safe

*************************************************************************************
Class Notes 07/11

1). Stand Up
    - Since last time?
       Worked with David on movement
       reading effective java book 
     - What I Will do next time?
       Pair program with David and Edwin
     - Blockers
       None
2). Chapter 2 | Effective Java

    Prefer Dependency Injection
        * Helps preserve immunity
        * Works for constructors, factories, and builders
        * can pass factory into constructors
            - Mosaic create(SUpplier<? Extends Title> titleFactory) {...}
        * Use DI frameworks
            - Makes code easier to rewrite: single source of edit, 
              makes the edit less complex.
    Avoid Creating Unnecessary Objects
        * Use literals and valueOf()
        * Anything that is immutable
        * Anything that is stateless 
            - E.g.: adapters
    So
        * Be careful about the auto-unboxing in Java for runtime to be faster
        * Try hard not to not mange memory
        * Nulling object references should be very unusual 
    Avoid Finalizers 
        * Unpredictable, often dangerous, generally unnecessary
        * Unlike C++ destructors
            - These are called immediately
            - Java uses try/finally for these types of uses
        * One never knows when a finalizer is called
            - Part of garbage collection
            - Might not be called at all
        * Don't e.g. close files as there is a limited number of open files 
        * Finalizers are slow and unchained
        * If really functionality, private resources...
        * there are finalizer attacks
            - Create final finalize method to protected
        * Implement AutoCloseable
            - Have to have close method --> try-with-resources statements

3). Methods Common to All Objects - Chapter 3 | Effective Java
    
    Obey the General Contract when Overriding Equals
        Sometimes you don't need to
            - When all object are unique, such as threads 
            - When you don't need it, such as with random number generators
            - Superclass equals works well, such as sets, lists, and maps 
              getting from Abstract, etc.
              ...
        When to Implement?
            * When logical equality (.equals) is different from the simple 
              object identity (==)
            * This is the typical case as classes have state, kept by 
              variables with values
            * Tests fore equivalence, not the same object
            * When we need the class to be map keys or set elements
        Must Implement an Equivalence 
            * Must be reflective: x.equals(x) must return true 
            * Must be symmetric:
            * Etc...
        So? 
            * There is no wat to extend an instantiable class and a value while 
              preserving the equals contract
            * You can safely add values to a subclass of an abstract class

*************************************************************************************
Class Notes 07/15

1). Stand Up
    - Since last time?
        Pair programmed with Derek
        Disagreement resolved
        Reading effective java book 
     - What I Will do next time?
        Pair program with my team after class
        Finish up CLI tests with Greg
     - Blockers
       None

2). Methods Common to All Objects - Chapter 3 | Effective Java (Continuation)

    Consistency
        * do no write an equals method that depends on unreliable resources
        * Java's URL equals relies on IP address comparison
            - What happens when not no network?
            - What happens when network addresses change?
    Recipe
        * Check object == this
        * Use instanceOf to check for correct type
        * Cast argument to correct type
        * Test == for all significant fields
            - Except for Float.compare, Double,compare, and Arrays.equal
        * Also override hashCode
        * Use @Override
    Always Override HashCode When You Override Equals
        * Invoked on the same object, and the object hasn't changed to affect 
          equals, always return the same integer
        * If two objects are equals, both hashCodes must be the same
        * If they are not equals, it is not required to product distinct hashCodes
            - If not, hash table performance can be affected
            - "return 42" is legal, but horrible
    Creating a hashCode
        * Exclude any redundant fields
            - Should have only one expression overall
        * Ignore any fields ignored by equals 
    Creating hashCode Code (Java Slide)
    Always Override toString
        * Makes class much more pleasant ro use 
        * When practical, toString should return all interesting information in object
        * One has to choose the format returned
            - Good idea ti create a constructor or static factory that takes 
              string representation and creates object 
        * Provide access to values in toString via getters
    Override Clone Judiciously
        * Creates and returns a copy of an object
            - x.clone() != x
            - c.lone 
            ...
    More Clones
        * No need to provide clone for immutable objects
        * Instead, can provide copy constructor or factory
            - public Foo(Foo foo)
            - public static Foo newInstance(Foo foo)
        * Interfaces should not extend Cloneable
        * Classes designed for inheritance should not implement it
    Consider Implementing Comparable
        * Similar to equals 
            - But provides ordering information
            - Is generic
            - Useful in e.g. Arrays.sort()
        * Returns comparison between two objects
            - -1 if first less than second 
            - 0 if equals to
            - 1 if greater than
    compareTo (Different examples of Java compareTos') 
    Compare verses Equals (Java Code Slide)

3). Classes and Interfaces - Chapter 4 | Effective Java
        
    Minimize the Accessibility of Classes and Members 
        * (Long quote)
        * Encapsulation
        * Decouples modules allowing them to be developed, tested, optimized,
          used, understood, and modified in isolation
        * Make each class or remember aas inaccessible as possible
        * If used nowhere else, nest a class within the class that uses it
        * Don't make any variable/field/attribute public 
            - worst make it a private package 
        * Try to avoid protected too
            - Must always support
            - Exposes implementation detail to subclasses
            - Should be rare
        * If a Method overrides a superclass method, it must have the same 
          access level
            - To not violate the Liskov inversion principle
        * Implementing an interface requires all methods to be public
            - Implicit in implementing an interface
        * Instance field should never be public 
        * Instance field should never be public
            - Limits typing 
            - Limits invariants 
            - Are not thread-safe
        * Array are always mutable
            - Never have a public static final array field
            - Or an accessor that returns such a beast
            - Be careful of IDEs that create accessors automatically
    In Public Classes, Use Accessor Methods, not Public Fields
        * Book still insists on using lame examples of sets instead of 
          simply making fields public
            - With the ostensible argument that we can change internal representation
                # but we never do
                # And if we do, we break the preexisting API contract
            - Less harmful if immutable

*************************************************************************************
Class Notes 07/17

1). Stand Up
    - Since last time?
        Pair programmed with Luke, Edwin, and David
        Reading effective java book 
     - What I Will do next time?
        Pair program with my team after class
        Finish up CLI tests with Greg
        Finish up objects tests with Edwin
     - Blockers
       None

       "Universal plug and play" needs to be turned off on your router

2). Classes and Interfaces - Chapter 4 | Effective Java (Continuation)

    Minimize Mutability
        * All information provided at construction
        * Any changes result in new objects
            - Which is a general rule
        * Don't provide methods that modify an object's state
            - Mutators
        * Ensure class cannot be extended 
            - subclasses can't change intent
        * Make all fields final
        * Make all fields private 
        * Ensure client cannot obtain references to mutable data 
            - Don't use client-provided reference
            - Don't return direct object reference
            - Make defense copies 
        * Immutable objects are simple
            - Always the same behavior
            - Never global data
        * Immutable objects are thread-safe
            - Implicitly parallelizable
            - No synchronization needed 
        * Only possible downside is the need for an object for each value
            - But: objects are in general cheap
            - Are you sure it's inefficient 
        * "Classes should be immutable unless there is a good reason to make them mutable"
            - At the very least, from an external point of view
        * If cannot be immutable, limit mutability as much as possible
            - Make every field final, if notified otherwise
    Favor Composition over Inheritance
        * GO4
        * Inheritance violates encapsulation
    Compose intermediate
        * An instrumentedHashSet has a HashSet instead of extending a HashSet
            - And extends a ForwardingSet class
        * Have methods forward to the referenced type
        *  There are wrapper classes
            - AKA decorator classes 
    Inheritance
        * Is-A relationship
        * Is every instance of a subclass really an instance of the superclass?
            - if not, have a private instance...
    Design and Document for Inheritance
        * The only way to test a class designed for inheritance is to write subclasses
        * Constructors must not call over-ridable methods
            - Directly or indirectly 
            - A superclass constructor runs before a subclass constructor, so any 
              subclass...
    Prefer Interfaces to Abstract Classes
        * Classes force inheritance
            - Java is a single inheritance
        * Existing classes can be easily changed implement interface
        * Interface are ideal for defining maxins 
            - Loosely, a mixin is an additional type for a class
            - Useful for polymorphism
            - Know what methods are available to client, which in general define a type
        * Can create skeletal implementation for each interface
            - Generally call AbstractInterface (Skeleton interface might be better)
            - AbstractCollection, Map, List, and Set
        * Abstract do permit multiple implementations
    Prefer Class Hierarchies to Tagged Classes
        * Verbose, error-prone, and inefficient
        * Imitation of a real class hierarchy

*************************************************************************************
Class Notes 07/18

1). Demo Day

2). Classes and Interfaces - Chapter 4 | Effective Java (Continuation)

    Use Function Objects to REpresent Strategies
        * Java didn't have method references or lamda
        * ...
    Favor static Member Classes Over Non-Static
        * A nested class is defined within another class
        * Only serves the encoding class
        * Four kinds (inner classes):
            - Static 
            - Non-Static
            - Anonymous 
            - Local
        * Last three are called inner classes
        * For example, in a linked list, nodes do not need to refer to 
          head, tail, etc., from list class
        * No need for node to contain all the data in list, so it can be 
          a static member class
    Anonymous Classes
        * Have no names
        * Not a member of enclosing class
        * Declared and instantiated at the same place
        * ... 
        "A Lamda is an anonymous method" - Beaty

3). Generics - Chapter 5 | Effective Java
    Typing 
        * Java's type system is very complex
        * It add various mechanisms to add "generics"
        * Other languages simply have references to objects and duck typing 
    Generic Types
        * Generic classes and interfaces are known as generic types
        * Generic types define sets of parameterized...
    Prefer Lists to Arrays
        * Arrays are convariant
            - If sub is a subtype of super, sun[] is a subtype pf super[]
        * Generics are invariant
            - List<t1> is never a subtype of List<t2>
        Example:
        class a {...}
        class b extends a {...}
        a y[];
        b z[];

*************************************************************************************
Class Notes 07/22

1). Stand Up
    - Since last time?
        Pair programmed with Luke, Matt, Lauren, and David
        Reading effective java book
        Pair programmed with Derek
        Worked on the Trello with Edwin and Lauren
     - What I Will do next time?
        Meeting after class
        Finish up the Maze and CLI 
        Finish up load method
     - Blockers
       CLI and maze 

2). Generics - Chapter 5 | Effective Java (continuation)
    Arrays Verses Generics
        * Arrays are redefined
            - Their element types are enforced at runtime
        * Generics are implement by type erasure
            - Types enforced at compile time and erase type at run time 
        * Cannot create arrays of generic types, parameterized types, or 
          type parameters
    Bounded Wildcards
        * list<String> is not a subtype of list<Object>
        * However, every object is a subtype of itself 
        * So, can have a parameter that "extends"...
    When To Use
        * Use bounded wildcards in methods that have producer or consumer parameters
            - Maybe not a great idea anyway
        * PECS: Producer/Extends, Consumer/Super

3). Enums and Annotations - Chapter 6 | Effective Java
    Java 
        * Java's enumerations are more powerful than other languages'
        * Almost classes
            - Can't extend, but can implement an interface
        * Export one instance of each enumeration via a public static final field
        * Enums are final
            - Only one instance
        * Provide compile-time type safety
        * Can't pass or assign incorrectly 
    Enumerations
        * Don't count on ordinal values
        * Use constructor instead
        * Use EnumSets instead of bit fields
    Annotations
        * Prefer Annotations to Naming Patterns
            - JUnit a major example
        * Consistently use @Override
            - Makes sure you are actually overriding
            - Especially for equals, toString, and hashCode
    Use Marker Interfaces to Define Types 
        * A marker interface is one with no methods
        * Serializable is an object
            - Indicates object can be written via ObjectOutputStream 

4). Upon Reflection
        "The ability for the computer program modify its own structure" - Beaty
    Java
        * JUnit, Sprint, Struts, and Hibernate (object-relational mapping)
        * Information on:
            - Classes and inheritance
            - Methods (and constructors)
            - Fields
            - Modifiers
        * Can call
            - Methods (and constructors)
        * Can change fields and modifiers
        * Can't add/delete classes, fields, or methods 
    (A Ton of Java in Class Examples)

*************************************************************************************
Class Notes 07/24

1). Stand Up
    - Since last time?
        Pair programmed with Casey, David, and Edwin
        Had a meeting with Edwin to fix Trello better
     - What I Will do next time?
        Meeting after class
        Finish up the Maze and CLI 
     - Blockers
       CLI and maze 

2). Methods - Chapter 8 | Effective Java
    Check Parameters for Validity
        * Most parameters have restrictions on their validity
            - Positive, non-null, not zero-length, etc.
        * AKA preconditions
        * Program defensively 
        * Catch problems as soon as possible
        * Fail test (a soon as there is a problem take an appropriate action)
        * Method may die 
            - Or worse, work but in an unexpected way
        * Throw an exception
            -  An IllegalArgumentException a good choice
    Assertions
        * Optional in Java
            - Must enable with -ea
            - Or in first class (and doesn't enable them there):
                static {
                    ClassLoader.getSystemClassLoader().
                        setDefaultAssertionsStatus(true); 
                }
                ^
                |"Turns on assertions from then on" - Beaty
    Check Parameters for Validity
        * Important for maintaining object consistency
            - Values stored for later use must be good
            - Checks in constructors is important
        * Check before doing any calculation
            - Unless calculation does the checks for you
    Makes Defensive Copies
        * Assume the worst of your class's clients
            - They will modify your invariants 
    Arrays 
        * Non-zero-length arrays are always mutable
        * Return a copy
    Design Method Signatures Carefully
        * Good names
        * Short parameter lists
            - If identical, maybe use varargs
    Short Parameter Lists
        * Maybe pass a class that encapsulates multiple parameters
        * Maybe use the builder pattern
        * Prefer interfaces for parameters
        * Avoid booleans, favor enumerations 
    Overloading Judiciously
        * Overloading happens at compile time
        * Overloading is static, overriding is dynamic
            static - happens at compile time
            dynamic - happens at run time
    Write good Javadoc Documentation
        * For all your visible teammates

*************************************************************************************
Class Notes 07/25

1). Stand Up
    - Since last time?
        Pair programmed with Lauren, Casey, and Edwin
        Fixed up the Trello
        Updated the yaml file and updated the code for our map tests
     - What I Will do next time?
        Meeting after class
        Finish up the Maze and CLI test that is lacking
     - Blockers
       Just need help with the save/load method tests

2). Lambdas and Streams - Chapter 7 | Effective Java
    Prefer lambdas to Anonymous Classes
        * For example strategy patterns 
        * Used to use anonymous classes
        * Java 8 introduced functional interfaces
            - Lambda expressions
            - Method references 
        * Equivalent
        * More concise 
    Types
        * Static
            Example:
                Str -> Integer.parseInt(str)
                Integer::parseDouble
        * Bound 
            - Receiving object specified in method reference
            Example:
                Instance then = instant.now();
                t -> then.isAfter(t)
                Instant.now()::isAfter
        * Unbound 
            - Receiving object specified in lambda parameter
            Example:
                str -> str.toLowerCase()
                String::toLowerCase
        * Contractors for classes and arrays 
    Favor the Use of Standard Functional interfaces
        * 43 Total
        * 5 basic typesOperator
            - Results and arguments the same type 
              (Usually always doubles returned)
        * Predicate 
            - Returns a boolean
        * Function
            - Arguments and return types difference
        * Supplier 
            - Takes no arguments but returns a value
        * Consumer 
            - Takes arguments but returns nothing
        * UnaryOperator - T apply (T t)
            - String::toLowerCase
        * BinaryOperator - T apply (T ti, T t2)
        * Predicate - boolean test
        ...
        * Function - R apply (T t)
            - Arrays::asList
        * Supplier - T get ()
            - Instant::now
        * Consumer - void accept (T t)
            - System.out::println
    Use Streams Judiciously
        * Stream - sequence of data elements
        * Pipeline - multistage computation on elements
        * Source, intermediate operations, terminal operation
        * Executed lazily
        * Fluent - chained into a single statements
        * Sequential by default
            - Can add .parallel
        * Best for transforming, filtering, combining, accumulating, 
          searching a series of data
    Use Caution When Making Stream parallel
        * Doesn't work well with Stream.iterate or .limit
        * Does work well with ArrayList, HashMap, HashSet, arrays, 
          int and long ranges
        * Best if terminal operation is a reduction

*************************************************************************************